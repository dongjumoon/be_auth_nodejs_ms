swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger 커피공장 플랫폼"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
  - name: "커피공장"
    description: "동네 커피 주문을 효과적으로 처리할 수 있는 지상의 하나뿐인 플랫폼"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /api/order:
    post:
      tags:
        - "주문관리"
      summary: "주문등록 합니다. "
      description: ""
      operationId: "createOrderId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "주문 OrderDTO로 받는다."
          required: true
          schema:
            $ref: "#/definitions/OrderDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/order/{userId}:
    get:
      tags:
        - "주문관리"
      summary: "주문조회를 합니다. "
      description: ""
      operationId: "findByUserId"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "사용자ID를 Path를 받습니다."
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/order/pay/{userId}:
    get:
      tags:
        - "주문관리"
      summary: "주문결제를 합니다."
      description: ""
      operationId: "payOrderUserId"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "사용자ID를 Path로 받습니다."
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/point/{userId}:
    get:
      tags:
        - "포인트관리"
      summary: "포인트를 조회한다."
      description: ""
      operationId: "findByUserIdPoint"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "사용자ID를 Path로 받습니다."
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/point/add:
    put:
      tags:
        - "포인트관리"
      summary: "포인트를 누적한다."
      description: ""
      operationId: "addUserIdPoint"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "포인트를 PointDTO로 받는다."
          required: true
          schema:
            $ref: "#/definitions/PointDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/point/use:
    put:
      tags:
        - "포인트관리"
      summary: "포인트를 사용한다."
      description: ""
      operationId: "useUserIdPoint"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PointDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/product:
    post:
      tags:
        - "상품관리"
      summary: "상품을 등록한다."
      description: ""
      operationId: "createProduct"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "상품을 ProductDTO로 등록 합니다."
          required: true
          schema:
            $ref: "#/definitions/ProductDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

    get:
      tags:
        - "상품관리"
      summary: "상품을 목록 조회"
      description: ""
      operationId: "findByProdAll"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/product/{prodId}:
    get:
      tags:
        - "상품관리"
      summary: "상품을 상세 조회"
      description: ""
      operationId: "findByProdId"
      produces:
        - "application/json"
      parameters:
        - name: "prodId"
          in: "path"
          description: "상품을 prodId로 상세조회 합니다."
          required: true
          type: "string"
          format: "string"

      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/user:
    get:
      tags:
        - "회원관리"
      summary: "모든 회원을 조회합니다"
      description: ""
      operationId: "findAllId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

    post:
      tags:
        - "회원관리"
      summary: "회원을 등록합니다"
      description: ""
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "회원을 등록합니다"
          required: true
          schema:
            $ref: "#/definitions/UserDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"
    put:
      tags:
        - "회원관리"
      summary: "회원을 수정합니다"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "회원을 수정합니다"
          required: true
          schema:
            $ref: "#/definitions/UserDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/user/{user_id}:
    get:
      tags:
        - "회원관리"
      summary: "회원을 검색합니다"
      description: ""
      operationId: "findAId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "회원을 user_id로 상세조회 합니다."
          required: true
          type: "string"
          format: "string"

      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

    delete:
      tags:
        - "회원관리"
      summary: "회원을 삭제합니다"
      description: ""
      operationId: "deleteUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "회원을 user_id로 삭제합니다."
          required: true
          type: "string"
          format: "string"

      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/board:
    get:
      tags:
        - "게시판"
      summary: "게시글 목록을 가져옵니다"
      description: ""
      operationId: "getBoardList"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

    post:
      tags:
        - "게시판"
      summary: "게시글 등록 합니다. "
      description: ""
      operationId: "createBoard"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "게시글 작성 BoardCreateDTO로 받는다."
          required: true
          schema:
            $ref: "#/definitions/BoardCreateDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

    put:
      tags:
        - "게시판"
      summary: "게시글을 수정합니다"
      description: ""
      operationId: "updateBoard"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "게시글 수정 BoardUpdateDTO로 받는다"
          required: true
          schema:
            $ref: "#/definitions/BoardUpdateDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/board/paging:
    get:
      tags:
        - "게시판"
      summary: "게시글 검색 목록을 가져옵니다(+페이징)"
      description: ""
      operationId: "getBoardSearchList"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "게시글 검색 BoardSearchDTO로 받는다"
          required: true
          schema:
            $ref: "#/definitions/BoardSearchDTO"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/board/detail:
    get:
      tags:
        - "게시판"
      summary: "게시글 하나를 가져옵니다"
      description: ""
      operationId: "getBoardDetail"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "bno"
          in: "query"
          description: "게시글을 bno로 조회 합니다."
          required: true
          type: "string"
          format: "string"

      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/board/{bno}:
    delete:
      tags:
        - "게시판"
      summary: "게시글을 삭제합니다"
      description: ""
      operationId: "deleteBoard"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "bno"
          in: "path"
          description: "게시글을 bno로 삭제합니다."
          required: true
          type: "string"
          format: "string"

      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"
  
  /api/auth/login:
    post:
      tags:
        - "로그인/로그아웃관리"
      summary: "회원 로그인"
      description: ""
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "로그인을 합니다."
          required: true
          schema:
            $ref: '#/definitions/AuthDTO' 
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"

  /api/auth/logout:
    post:
      tags:
        - "로그인/로그아웃관리"
      summary: "회원 로그아웃"
      description: ""
      operationId: "logout"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"        

  /api/banner:
    post:
      tags:
        - "배너관리"
      summary: "배너 등록"
      description: ""
      operationId: "reg"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "배너 등록을 BannerDTO로 받는다"
          required: true
          schema:
            $ref: "#/definitions/BannerDTO"  
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"     
    put:
      tags:
        - "배너관리"
      summary: "배너 수정"
      description: ""
      operationId: "edit"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "배너 수정을 BannerDTO로 받는다"
          required: true
          schema:
            $ref: "#/definitions/BannerDTO"  
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"        
    delete:
      tags:
        - "배너관리"
      summary: "배너 삭제"
      description: ""
      operationId: "remove"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "배너 삭제를 BannerDTO로 받는다"
          required: true
          schema:
            $ref: "#/definitions/BannerDTO"  
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"       

  /api/banner/deploy:
    put:
      tags:
        - "배너관리"
      summary: "배너 배포"
      description: ""
      operationId: "deploy"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "배너 배포를 BannerDTO로 받는다"
          required: true
          schema:
            $ref: "#/definitions/BannerDTO"  
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"    

  /api/banner/cancelDeploy:
    put:
      tags:
        - "배너관리"
      summary: "배너 배포취소"
      description: ""
      operationId: "cancelDeploy"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "배너 배포취소를 BannerDTO로 받는다"
          required: true
          schema:
            $ref: "#/definitions/BannerDTO"  
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"  

  /api/banner/all/{startDate}:
    get:
      tags:
        - "배너관리"
      summary: "배너 전체 조회"
      description: ""
      operationId: "list"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "startDate"
          in: "path"
          description: "path로 시작일자를 받는다."
          required: true
          type: "string"
          format: "string"
          
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"     

  /api/banner/detail/{bannerId}:
    get:
      tags:
        - "배너관리"
      summary: "배너 상세 조회"
      description: ""
      operationId: "detail"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "bannerId"
          in: "path"
          description: "path로 배너ID를 받는다."
          required: true
          type: "string"
          format: "string"
          
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Invalid input"     


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  OrderDTO:
    type: "object"
    properties:
      userId:
        type: "string"
        format: "test@gmail.com"
      productId:
        type: "string"
        format: "PD0001"
      startDateTime:
        type: "string"
        format: "20210501000000"
      endDateTime:
        type: "string"
        format: "20210501000000"
      orderState:
        type: "string"
        description: "상태값"
        enum:
          - "주문요청"
          - "주문완료"
          - "픽업완료"

  PointDTO:
    type: "object"
    properties:
      pointId:
        type: "string"
        format: "string"
      score:
        type: "integer"
        format: "int64"
      regDate:
        type: "string"
        format: "string"
      userId:
        type: "string"
        format: "string"

  ProductDTO:
    type: "object"
    properties:
      prodId:
        type: "string"
        format: "string"
      name:
        type: "string"
        format: "string"
      price:
        type: "integer"
        format: "int64"
      volume:
        type: "integer"
        format: "int64"
      size:
        type: "string"
        format: "string"
      sort:
        type: "integer"
        format: "int64"
      imgUrl:
        type: "string"
        format: "string"
      useYn:
        type: "string"
        format: "string"
      hotIceGb:
        type: "string"
        format: "string"
      whippingYn:
        type: "string"
        format: "string"
      shotYn:
        type: "string"
        format: "string"
      category:
        type: "string"
        format: "string"

  UserDTO:
    type: "object"
    properties:
      user_name:
        type: "string"
        format: "string"
      user_id:
        type: "string"
        format: "string"
      email:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "string"
      img_url:
        type: "string"
        format: "string"

  BoardDTO:
    type: "object"
    properties:
      title:
        type: "string"
        format: "string"
      content:
        type: "string"
        format: "string"
      uploadFileId:
        type: "string"
        format: "string"
      noticeYn:
        type: "boolean"
        format: "boolean"
      type:
        type: "string"
        format: "string"
      popupYn:
        type: "boolean"
        format: "boolean"
      useYn:
        type: "boolean"
        format: "boolean"
      regDate:
        type: "string"
        format: "string"
      regWriter:
        type: "string"
        format: "string"
      modifyDate:
        type: "string"
        format: "string"
      modifyWriter:
        type: "string"
        format: "string"
      delDate:
        type: "string"
        format: "string"
      delWriter:
        type: "string"
        format: "string"
      likeAction:
        type: "number"
        format: "number"
      dislikeAction:
        type: "number"
        format: "number"
      hideYn:
        type: "boolean"
        format: "boolean"
      bno:
        type: "string"
        format: "string"
      startDate:
        type: "string"
        format: "string"
      endDate:
        type: "string"
        format: "string"

  BoardCreateDTO:
    type: "object"
    properties:
      title:
        type: "string"
        format: "string"
      content:
        type: "string"
        format: "string"
      uploadFileId:
        type: "string"
        format: "string"
      noticeYn:
        type: "boolean"
        format: "string"
      type:
        type: "string"
        format: "string"
      popupYn:
        type: "boolean"
        format: "boolean"
      regDate:
        type: "string"
        format: "string"
      regWriter:
        type: "string"
        format: "string"
      bno:
        type: "string"
        format: "string"

  BoardUpdateDTO:
    type: "object"
    properties:
      title:
        type: "string"
        format: "string"
      content:
        type: "string"
        format: "string"
      uploadFileId:
        type: "string"
        format: "string"
      noticeYn:
        type: "boolean"
        format: "boolean"
      type:
        type: "string"
        format: "string"
      popupYn:
        type: "boolean"
        format: "boolean"
      modifyWriter:
        type: "string"
        format: "string"
      bno:
        type: "string"
        format: "string"

  BoardSearchDTO:
    type: "object"
    properties:
      pageNumber:
        type: "number"
        format: "number"
      offset:
        type: "number"
        format: "number"
      max:
        type: "number"
        format: "number"
      sort:
        type: "string"
        format: "string"
      order:
        type: "string"
        format: "string"
      keyword:
        type: "string"
        format: "string"
      gnb:
        type: "string"
        format: "string"
  
  AuthDTO:
    type: "object"
    properties:
      user_id:
        type: "string"
        format: "string"
      password:
        type: "string"
        format: "string"      

  BannerDTO:
    type: "object"
    properties:
      bannerId:
        type: "string"
        format: "string"
      name:
        type: "string"
        format: "string"      
      imgUrl:
        type: "string"
        format: "string"      
      width:
        type: "number"
        format: "number"      
      height:
        type: "number"
        format: "number"      
      location:
        type: "string"
        format: "string"      
      startDate:
        type: "string"
        format: "string"      
      endDate:
        type: "string"
        format: "string"      
      title:
        type: "string"
        format: "string"      
      description:
        type: "string"
        format: "string"      
      sort:
        type: "number"
        format: "number"      
      deployYn:
        type: "string"
        format: "string"      

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
